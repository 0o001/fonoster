/**
 * MIT License
 * Copyright (c) 2020 Fonoster Inc
 *
 * The UserMananger proto contains the artificats for Users administration
 * such as creation and deployment.
 */
syntax = "proto3";

package fonos.usermanager.v1alpha1;

import "common.proto";

service UserManager {
  // Lists user Userlications
  rpc ListUsers (ListUsersRequest) returns (ListUsersResponse) {};
  // Gets User with the User-name
  rpc GetUser (GetUserRequest) returns (User) {};
  rpc CreateUser (CreateUserRequest) returns (User) {};
  // Updates an User resource
  rpc UpdateUser (UpdateUserRequest) returns (User) {};
  // Peforms a hard delete of the User resource
  rpc DeleteUser (DeleteUserRequest) returns (fonos.common.v1alpha1.Empty) {};
}

message ListUsersRequest {
  // The maximum number of items to return.
  int32 page_size = 1;

  // The next_page_token value returned from a previous List request, if any.
  string page_token = 2;

  // Level of detail of the individual entities
  fonos.common.v1alpha1.View view = 3;
}

message ListUsersResponse {
  // There will be a maximum number of items returned based on the page_size field
  // in the request.
  repeated User users = 1;

  // Token to retrieve the next page of results, or empty if there are no
  // more results in the list.
  string next_page_token = 2;
}

message GetUserRequest {
  // The field will contain the reference of the User requested, for example:
  // "Users/hello-world"
  string email = 1;
  // Requested level of detail
  fonos.common.v1alpha1.View view = 2;
}

message CreateUserRequest {
  User user = 2;
}

message UpdateUserRequest {
  User user = 2;
}

message DeleteUserRequest {
  string email = 1;
}

// An User resource with metadata used by the media controller
message User {
  enum Status {
    DELETED = 0;
    // The User is deleted
    ACTIVE = 1;
    // The User is ready for usage
    SUSPENDED = 2;
    // The User is suspended or inactive
  }
  string firstname = 1;
  string lastname = 2;
  string username = 3;
  string email = 4;
  string access_key_id = 5;
  string role = 6;
  string create_time = 7;
  string update_time = 8;
  Status status = 9;
  
  map <string, string> labels = 10;
}

// TODO
// Consider having a proto for the Role entity