# NOTICE: This is here for testing convinience You should not use this
# in production as it has many unneeded open ports and the display of
# credentials.

version: '3.7'
services:

  credentialsgen:
    image: credentialsgen
    build:
      context: mods
      dockerfile: Dockerfile.cred
    environment:
      CERTS_PATH: /etc/certs
      YAPS_ACCESS_KEY_ID: yaps
    entrypoint: |
      sh -c '
          node gen_jwt_token.js > /credentials/access
          echo "Your new credentials are:"
          cat /credentials/access

          # Hangout while the other containers finish
          while sleep 3600; do :; done
      '
    volumes:
      - data1-1:/fs
      - credentials:/credentials
      - ./mods/etc/certs:/etc/certs:ro

  provisioner:
    env_file: .env
    build:
      context: .rctl
    entrypoint: |
      sh -c '
        while ! nc -z $SIPPROXY_HOST ${SIPPROXY_API_PORT}; do sleep 0.1; done
        rctl login https://${SIPPROXY_HOST}:${SIPPROXY_API_PORT}/api/v1beta1 \
          -u ${SIPPROXY_API_USERNAME} -p ${SIPPROXY_API_SECRET}
        rctl create -f /etc/bootstrap.yml
      '
    volumes:
      - ./etc/bootstrap.yml:/etc/bootstrap.yml:ro

  apiserver:
    logging:
      driver: json-file
    ports:
      - ${APISERVER_PORT}:${APISERVER_PORT}
    volumes:
      - ./mods/etc/certs:/etc/certs:ro

  sipproxy:
    logging:
      driver: json-file
    #volumes:
    #  - ./etc/log4j2.yml:/opt/routr/config/log4j2.yml:ro

  mediaserver:
    logging:
      driver: json-file
    ports:
      - ${MS_SIP_PORT}:${MS_SIP_PORT}

  mediacontroller:
    depends_on: [credentialsgen]
    logging:
      driver: json-file

  datasource:
    logging:
      driver: json-file
    ports:
      - ${DS_PORT}:${DS_PORT}

  fs:
    logging:
      driver: json-file
    ports:
      - ${FS_PORT}:${FS_PORT}

  tts:
    logging:
      driver: json-file
    ports:
      - ${TTS_ENGINE_PORT}:${TTS_ENGINE_PORT}

  integrationtests:
    depends_on: [apiserver]
    env_file: .env
    image: integrationtests
    build:
      context: mods
      dockerfile: Dockerfile.mc
    environment:
      YAPS_ACCESS_FILE: /credentials/access
      YAPS_ENDPOINT: ${APISERVER_ENDPOINT}
      CERTS_PATH: /etc/certs
    entrypoint: |
      sh -c '
          npm i nyc mocha -g
          cd /mods
          npm test
      '
    volumes:
      - credentials:/credentials
      - ./mods/etc/certs:/etc/certs:ro

volumes:
  data1-1:
  credentials:
