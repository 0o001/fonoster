version: '3.7'
services:

  apiserver:
    env_file: .env
    image: ${APISERVER_IMAGE}:${COMPOSE_PROJECT_VERSION}
    restart: always
    build:
      context: mods
      dockerfile: Dockerfile.as
    environment:
      CERTS_PATH: /etc/certs
    expose:
      - ${APISERVER_PORT}
    ports:
      - ${APISERVER_PORT}:${APISERVER_PORT}
    volumes:
      - ./mods/etc/certs:/etc/certs:ro
    logging:
        driver: fluentd
        options:
            fluentd-address: localhost:24224
            fluentd-async-connect: 'true'
            fluentd-retry-wait: '1s'
            fluentd-max-retries: '30'
            tag: ${LOG_OPT_TAG_PREFIX}.${COMPOSE_PROJECT_NAME}.apiserver

  mediaserver:
    env_file: .env
    image: ${MS_IMAGE}:${COMPOSE_PROJECT_VERSION}
    restart: always
    entrypoint: sh -c './run.sh'
    environment:
      MS_EXTERN_ADDR: ${HOST_ADDR}
      MS_AGI_URL: agi://${MC_HOST}
      MS_SIP_BINDADDR: 0.0.0.0:${MS_SIP_PORT}
      MS_SIPPROXY_HOST: ${SIPPROXY_HOST}
      MS_SIPPROXY_USERNAME: ${SIPPROXY_USERNAME}
      MS_SIPPROXY_SECRET: ${SIPPROXY_SECRET}
    build:
      context: mediaserver
    expose:
      - ${MS_SIP_PORT}
    ports:
      - ${MS_SIP_PORT}:${MS_SIP_PORT}
    logging:
        driver: fluentd
        options:
            fluentd-address: localhost:24224
            fluentd-async-connect: 'true'
            fluentd-retry-wait: '1s'
            fluentd-max-retries: '30'
            tag: ${LOG_OPT_TAG_PREFIX}.${COMPOSE_PROJECT_NAME}.mediaserver

  mediacontroller:
    env_file: .env
    image: ${MC_IMAGE}:${COMPOSE_PROJECT_VERSION}
    restart: always
    environment:
      MC_AGI_PORT: ${MC_AGI_PORT}
      CERTS_PATH: /etc/certs
      ACCESS_KEY_ID: yaps
    build:
      context: mods
      dockerfile: Dockerfile.mc
    entrypoint: |
        sh -c '
          # Holy crap fix this :(
          # Generating the JWT token
          mkdir -p /workdir
          mkdir -p ~/yaps
          cp /mods/etc/gen_jwt_token.js /workdir
          cd /workdir
          npm install jsonwebtoken
          node gen_jwt_token.js > ~/yaps/credentials
          echo "new signature is:"
          cat ~/yaps/credentials
          rm -rf /workdir

          cd /
          ./run.sh
        '
    volumes:
      - data1-1:/fs
      - ./mods/etc/certs:/etc/certs:ro
    expose:
      - ${MC_AGI_PORT}

  datasource:
    env_file: .env
    image: ${DS_IMAGE}
    restart: always
    command: ["redis-server", "--appendonly", "yes", "--loadmodule", "/usr/lib/redis/modules/rejson.so"]
    hostname: redis
    expose:
      - ${DS_PORT}
    # WARNING: Hide this in production
    ports:
      - ${DS_PORT}:${DS_PORT}
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
        driver: fluentd
        options:
            fluentd-address: localhost:24224
            fluentd-async-connect: 'true'
            fluentd-retry-wait: '1s'
            fluentd-max-retries: '30'
            tag: ${LOG_OPT_TAG_PREFIX}.${COMPOSE_PROJECT_NAME}.datasource

  fs:
    image: ${FS_IMAGE}
    restart: always
    volumes:
      - data1-1:/data1
    expose:
      - ${FS_PORT}
    ports:
      - ${FS_PORT}:${FS_PORT}
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    command: minio server /data1/minio/
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    logging:
        driver: fluentd
        options:
            fluentd-address: localhost:24224
            fluentd-async-connect: 'true'
            fluentd-retry-wait: '1s'
            fluentd-max-retries: '30'
            tag: ${LOG_OPT_TAG_PREFIX}.${COMPOSE_PROJECT_NAME}.fs

  tts:
    env_file: .env
    image: ${TTS_IMAGE}
    restart: always
    expose:
      - ${TTS_ENGINE_PORT}
    logging:
        driver: fluentd
        options:
            fluentd-address: localhost:24224
            fluentd-async-connect: 'true'
            fluentd-retry-wait: '1s'
            fluentd-max-retries: '30'
            tag: ${LOG_OPT_TAG_PREFIX}.${COMPOSE_PROJECT_NAME}.tts

  logsdriver:
    env_file: .env
    build: ./.fluentd
    volumes:
      - ./.fluentd/conf:/fluentd/etc
    links:
      - logsaggregator
    expose:
      - ${LOGS_DRIVER_PORT}
      - ${LOGS_DRIVER_PORT}/udp

  logsaggregator:
    env_file: .env
    image: ${LOGS_AGGREGATOR_IMAGE}
    restart: always
    environment:
      - discovery.type=single-node
    expose:
      - ${LOGS_AGGREGRATOR_PORT}

  logsmonitor:
    env_file: .env
    image: ${LOGS_MONITOR_IMAGE}
    restart: always
    links:
      - logsaggregator
    ports:
      - ${LOGS_MONITOR_PORT}:${LOGS_MONITOR_PORT}
    environment:
      ELASTICSEARCH_HOSTS: http://logsaggregator:${LOGS_AGGREGRATOR_PORT}

## By default this config uses default local driver,
## For custom volumes replace with volume driver configuration.
volumes:
  data1-1:
