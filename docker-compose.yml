version: '3.7'
services:

  apiserver:
    env_file: .env
    image: ${AS_IMAGE}
    restart: always
    environment:
      DS_HOST: ${DS_HOST}
      DS_PORT: ${DS_PORT}
    expose:
      - ${AS_PORT}
    logging:
      driver: fluentd
      options:
        fluentd-address: localhost:24224
        fluentd-async-connect: 'true'
        fluentd-retry-wait: '1s'
        fluentd-max-retries: '30'
        tag: ${LOG_OPT_TAG_PREFIX}.${COMPOSE_PROJECT_NAME}.apiserver

  sipproxy:
    env_file: .env
    image: ${SIPPROXY_IMAGE}
    restart: always
    environment:
      ROUTR_EXTERN_ADDR: ${HOST_ADDR}
      ROUTR_DS_PROVIDER: redis_data_provider
      ROUTR_DS_PARAMETERS: host=${DS_HOST},port=${DS_PORT}
    expose:
      - ${SIPPROXY_API_PORT}
      - ${SIPPROXY_SIP_PORT}
    ports:
      - ${SIPPROXY_SIP_PORT}:${SIPPROXY_SIP_PORT}
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost ${SIPPROXY_API_PORT} || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 1
    logging:
      driver: fluentd
      options:
        fluentd-address: localhost:24224
        fluentd-async-connect: 'true'
        fluentd-retry-wait: '1s'
        fluentd-max-retries: '30'
        tag: ${LOG_OPT_TAG_PREFIX}.${COMPOSE_PROJECT_NAME}.sipproxy

  mediaserver:
    env_file: .env
    image: ${MS_IMAGE}
    restart: always
    environment:
      EXTERN_ADDR: ${HOST_ADDR}
      AGI_URL: agi://${MC_HOST}
      SIPPROXY_HOST: ${SIPPROXY_HOST}
      SIPPROXY_USERNAME: ${SIPPROXY_USERNAME}
      SIPPROXY_SECRET: ${SIPPROXY_SECRET}
    expose:
      - ${MS_SIP_PORT}
    logging:
      driver: fluentd
      options:
        fluentd-address: localhost:24224
        fluentd-async-connect: 'true'
        fluentd-retry-wait: '1s'
        fluentd-max-retries: '30'
        tag: ${LOG_OPT_TAG_PREFIX}.${COMPOSE_PROJECT_NAME}.mediaserver

  mediacontroller:
    env_file: .env
    image: ${MC_IMAGE}
    restart: always
    volumes:
      - data1-1:/fonos
    expose:
      - ${MC_AGI_PORT}
    logging:
      driver: fluentd
      options:
        fluentd-address: localhost:24224
        fluentd-async-connect: 'true'
        fluentd-retry-wait: '1s'
        fluentd-max-retries: '30'
        tag: ${LOG_OPT_TAG_PREFIX}.${COMPOSE_PROJECT_NAME}.mediacontroller

  datasource:
    env_file: .env
    image: ${DS_IMAGE}
    restart: always
    command: ["redis-server", "--appendonly", "yes", "--loadmodule", "/usr/lib/redis/modules/rejson.so"]
    hostname: redis
    volumes:
      - datasource:/data
    expose:
      - ${DS_PORT}
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: fluentd
      options:
        fluentd-address: localhost:24224
        fluentd-async-connect: 'true'
        fluentd-retry-wait: '1s'
        fluentd-max-retries: '30'
        tag: ${LOG_OPT_TAG_PREFIX}.${COMPOSE_PROJECT_NAME}.datasource

  fs:
    image: ${FS_IMAGE}
    restart: always
    volumes:
      - data1-1:/data1
    expose:
      - ${FS_PORT}
    environment:
      MINIO_ACCESS_KEY: ${FS_USERNAME}
      MINIO_SECRET_KEY: ${FS_SECRET}
    command: minio server /data1/fonos/
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    logging:
      driver: fluentd
      options:
        fluentd-address: localhost:24224
        fluentd-async-connect: 'true'
        fluentd-retry-wait: '1s'
        fluentd-max-retries: '30'
        tag: ${LOG_OPT_TAG_PREFIX}.${COMPOSE_PROJECT_NAME}.fs

  tts:
    env_file: .env
    image: ${TTS_IMAGE}
    restart: always
    expose:
      - ${TTS_ENGINE_PORT}
    logging:
      driver: fluentd
      options:
        fluentd-address: localhost:24224
        fluentd-async-connect: 'true'
        fluentd-retry-wait: '1s'
        fluentd-max-retries: '30'
        tag: ${LOG_OPT_TAG_PREFIX}.${COMPOSE_PROJECT_NAME}.tts

  logsdriver:
    env_file: .env
    build: ./.fluentd
    volumes:
      - ./.fluentd/conf:/fluentd/etc
    links:
      - logsaggregator
    expose:
      - ${LOGS_DRIVER_PORT}
      - ${LOGS_DRIVER_PORT}/udp

  logsaggregator:
    env_file: .env
    image: ${LOGS_AGGREGATOR_IMAGE}
    restart: always
    environment:
      - discovery.type=single-node
    expose:
      - ${LOGS_AGGREGRATOR_PORT}

  logsmonitor:
    env_file: .env
    image: ${LOGS_MONITOR_IMAGE}
    restart: always
    links:
      - logsaggregator
    ports:
      - ${LOGS_MONITOR_PORT}:${LOGS_MONITOR_PORT}
    environment:
      ELASTICSEARCH_HOSTS: http://logsaggregator:${LOGS_AGGREGRATOR_PORT}

# By default this config uses default local driver,
# For custom volumes replace with volume driver configuration.
volumes:
  data1-1:
  credentials:
  datasource:
