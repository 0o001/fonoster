version: '3.7'
services:

  datasource:
    env_file: .env
    image: ${DS_IMAGE}
    restart: always
    command: ["redis-server", "--appendonly", "yes", "--loadmodule", "/usr/lib/redis/modules/rejson.so"]
    hostname: redis
    expose:
      - ${DS_PORT}
    # WARNING: Hide this in production
    ports:
      - ${DS_PORT}:${DS_PORT}
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
        driver: fluentd
        options:
            fluentd-address: localhost:24224
            fluentd-async-connect: 'true'
            fluentd-retry-wait: '1s'
            fluentd-max-retries: '30'
            tag: ${LOG_OPT_TAG_PREFIX}.${COMPOSE_PROJECT_NAME}.datasource

  provisioner:
    env_file: .env
    build:
      context: .rctl
    entrypoint: |
      sh -c '
        while ! nc -z $SIPPROXY_HOST ${SIPPROXY_API_PORT}; do sleep 0.1; done
        rctl login https://${SIPPROXY_HOST}:${SIPPROXY_API_PORT}/api/v1beta1 \
          -u ${SIPPROXY_API_USERNAME} -p ${SIPPROXY_API_SECRET}
        rctl create -f /etc/bootstrap.yml
      '
    volumes:
      - ./etc/bootstrap.yml:/etc/bootstrap.yml:ro

  fs:
    image: ${FS_IMAGE}
    restart: always
    volumes:
      - data1-1:/data1
    expose:
      - ${FS_PORT}
    # WARNING: Hide this in production
    ports:
      - ${FS_PORT}:${FS_PORT}
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    command: minio server /data1/minio/
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    #logging:
    #    driver: fluentd
    #    options:
    #        fluentd-address: localhost:24224
    #        fluentd-async-connect: 'true'
    #        fluentd-retry-wait: '1s'
    #        fluentd-max-retries: '30'
    #        tag: ${LOG_OPT_TAG_PREFIX}.${COMPOSE_PROJECT_NAME}.fs

  tts:
    env_file: .env
    image: ${TTS_IMAGE}
    restart: always
    expose:
      - ${TTS_ENGINE_PORT}
    # WARNING: Hide this in production
    ports:
      - ${TTS_ENGINE_PORT}:${TTS_ENGINE_PORT}
    logging:
        driver: fluentd
        options:
            fluentd-address: localhost:24224
            fluentd-async-connect: 'true'
            fluentd-retry-wait: '1s'
            fluentd-max-retries: '30'
            tag: ${LOG_OPT_TAG_PREFIX}.${COMPOSE_PROJECT_NAME}.tts

  sipproxy:
    env_file: .env
    image: ${SIPPROXY_IMAGE}
    restart: always
    environment:
      ROUTR_EXTERN_ADDR: ${HOST_ADDR}
      ROUTR_DS_PROVIDER: redis_data_provider
      ROUTR_DS_PARAMETERS: host=${DS_HOST},port=${DS_PORT}
    expose:
      - ${SIPPROXY_API_PORT}
      - ${SIPPROXY_SIP_PORT}
    ports:
      - ${SIPPROXY_SIP_PORT}:${SIPPROXY_SIP_PORT}
      - ${SIPPROXY_API_PORT}:${SIPPROXY_API_PORT}
    volumes:
      - ./etc/log4j2.yml:/opt/routr/config/log4j2.yml:ro
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost ${SIPPROXY_API_PORT} || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 1
    logging:
        driver: fluentd
        options:
            fluentd-address: localhost:24224
            fluentd-async-connect: 'true'
            fluentd-retry-wait: '1s'
            fluentd-max-retries: '30'
            tag: ${LOG_OPT_TAG_PREFIX}.${COMPOSE_PROJECT_NAME}.sipproxy

  apiserver:
    env_file: .env
    image: ${APISERVER_IMAGE}
    restart: always
    build:
      context: mods
    environment:
      CERTS_PATH: /etc/certs
    expose:
      - ${APISERVER_PORT}
    ports:
      - ${APISERVER_PORT}:${APISERVER_PORT}
    volumes:
      - ./mods/etc/certs:/etc/certs:ro
    logging:
        driver: fluentd
        options:
            fluentd-address: localhost:24224
            fluentd-async-connect: 'true'
            fluentd-retry-wait: '1s'
            fluentd-max-retries: '30'
            tag: ${LOG_OPT_TAG_PREFIX}.${COMPOSE_PROJECT_NAME}.sipproxy

  mediaserver:
    env_file: .env
    image: ${MS_IMAGE}:${COMPOSE_PROJECT_VERSION}
    restart: always
    entrypoint: sh -c './run.sh'
    environment:
      MS_EXTERN_ADDR: ${HOST_ADDR}
      MS_AGI_URL: agi://${MC_HOST}
      MS_SIP_BINDADDR: 0.0.0.0:${MS_SIP_PORT}
      MS_SIPPROXY_HOST: ${SIPPROXY_HOST}
      MS_SIPPROXY_USERNAME: ${SIPPROXY_USERNAME}
      MS_SIPPROXY_SECRET: ${SIPPROXY_SECRET}
    build:
      context: mediaserver
    expose:
      - ${MS_SIP_PORT}
    logging:
        driver: fluentd
        options:
            fluentd-address: localhost:24224
            fluentd-async-connect: 'true'
            fluentd-retry-wait: '1s'
            fluentd-max-retries: '30'
            tag: ${LOG_OPT_TAG_PREFIX}.${COMPOSE_PROJECT_NAME}.mediaserver

  mediacontroller:
    env_file: .env
    image: ${MC_IMAGE}:${COMPOSE_PROJECT_VERSION}
    restart: always
    environment:
      MC_AGI_PORT: ${MC_AGI_PORT}
      MC_APP_ENTRYPOINT: ${MC_APP_ENTRYPOINT}/index.js
    build:
      context: mediacontroller
    entrypoint: |
      sh -c '
          # This wont be needed once we start deploying the apps
          cd ${MC_APP_ENTRYPOINT}
          rm -rf node_modules
          rm package-lock.json
          npm install
          cd / && ./run.sh
      '
    volumes:
      - ./apps:/apps:rw
      #- data1-1:/mnt/yaps:ro
      - ./mediacontroller/yaps/core:/yaps/core:ro
      - ./mediacontroller/yaps/app.js:/yaps/app.js:ro
      - ./mediacontroller/yaps/dispatcher:/yaps/dispatcher:ro
      - ./mediacontroller/yaps/utils/fsutils.js:/yaps/utils/fsutils.js:ro
      - ./mediacontroller/yaps/utils/logger.js:/yaps/utils/logger.js:ro
      - ./mediacontroller/yaps/tts:/yaps/tts:ro
      - ./mediacontroller/yaps/package.json:/yaps/package.json:ro
      - ./mods:/mods:ro
    expose:
      - ${MC_AGI_PORT}

  logsdriver:
    env_file: .env
    build: ./.fluentd
    volumes:
      - ./.fluentd/conf:/fluentd/etc
    links:
      - logsaggregator
    ports:
      - ${LOGS_DRIVER_PORT}:${LOGS_DRIVER_PORT}
      - ${LOGS_DRIVER_PORT}:${LOGS_DRIVER_PORT}/udp

  logsaggregator:
    env_file: .env
    image: ${LOGS_AGGREGATOR_IMAGE}
    restart: always
    environment:
      - discovery.type=single-node
    expose:
      - ${LOGS_AGGREGRATOR_PORT}
    ports:
      - ${LOGS_AGGREGRATOR_PORT}:${LOGS_AGGREGRATOR_PORT}

  logsmonitor:
    env_file: .env
    image: ${LOGS_MONITOR_IMAGE}
    restart: always
    links:
      - logsaggregator
    ports:
      - ${LOGS_MONITOR_PORT}:${LOGS_MONITOR_PORT}
    environment:
      ELASTICSEARCH_HOSTS: http://logsaggregator:${LOGS_AGGREGRATOR_PORT}

## By default this config uses default local driver,
## For custom volumes replace with volume driver configuration.
volumes:
  data1-1:
